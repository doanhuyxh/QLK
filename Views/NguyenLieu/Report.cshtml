﻿<div class="wrapper" id="view_index_TonKho">
    <div class="panel panel-hash">
        <div class="panel-body scroll panel-height">

            <h1 style="font-size:16pt">Báo cáo tồn kho </h1>


            <div class=" m-2 py-2 d-flex justify-content-around" style="width:100%">

                <div class="text-center" style="width:30em">
                    <input class="form-control" v-model="keyword" placeholder="tìm kiếm" style="width: 100%;" />
                </div>
                <div class="form-group d-flex justify-items-center">
                    <label for="chooseWeek" class="form-label mx-2 d-flex" style="align-items:center">Tuần</label>
                    <select class="form-control" id="chooseWeek" v-model="currentWeek">
                        <option value="0" selected>----</option>
                        <option v-for="(i, index) in week" :value="i.va">{{i.we}}</option>
                    </select>
                    <button type="button" v-on:click="ChooseWeek()" class="btn btn-outline-success" style="margin: 0 10px;height: 2.4rem;"><i class="fa-solid fa-circle-arrow-up fa-sm"></i></button>
                </div>
                <div class="d-flex">
                    <div class="d-flex justify-content-around">
                        <label class="btn text-nowrap" style="margin: 0 20px;">Bắt đầu</label>
                        <input type="date" v-model="startDate" class="form-control" />
                    </div>
                    <div class="d-flex justify-content-around">
                        <label class="btn text-nowrap" style="margin: 0 20px;">Kết thúc</label>
                        <input type="date" v-model="endDate" class="form-control" />
                    </div>
                    <button type="button" v-on:click="Update()" class="btn btn-outline-success" style="margin: 0 10px;height: 2.4rem;"><i class="fa-solid fa-circle-arrow-up fa-sm"></i></button>
                </div>
                <div class=" text-center mx-1">
                    <select class="form-control mb-3" v-model="khoId" v-on:change="ChangeKho()">
                        <option value="0" selected>Tất cả kho</option>
                        <option v-for="(kho, index) in dsKho" :value="kho.Id">{{kho.TenKho}}</option>
                    </select>
                </div>

                <div class="">
                    <button type="button" class="btn btn-success float-right" v-on:click="printDiv()" style="height: 2.4rem;font-size: 9px;">Tải về</button>
                </div>

            </div>
            <hr />
            <div class="container-fluid" id="partier_view">
                <partial name="~/Views/NguyenLieu/_ReportTonKho.cshtml" />
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    var view_index_TonKho = new Vue({
        el: "#view_index_TonKho",
        data: {
            check: false,
            data: [],
            keyword: "",
            dsKho: [],
            khoId: 0,
            khoName: "Kho nguyên liệu",
            NlNhapKho: [],
            NlXuatKho: [],
            startDate: "0",
            endDate: "0",
            CutomFile: [],
            week: [],
            currentWeek: 0
        },
        computed: {
            backupItem() {
                if (this.keyword == "") {
                    return this.data
                }
                else {
                    let currentThis = this;
                    return this.data.filter(item =>
                        currentThis.removeVietnamese(item.TenNguyenLieu).toLowerCase().includes(currentThis.removeVietnamese(currentThis.keyword))
                        || currentThis.removeVietnamese(item.MaNguyenLieu).toLowerCase().includes(currentThis.removeVietnamese(currentThis.keyword))
                        || currentThis.removeVietnamese(item.Mau).toLowerCase().includes(currentThis.removeVietnamese(currentThis.keyword))
                        || currentThis.removeVietnamese(item.Size).toLowerCase().includes(currentThis.removeVietnamese(currentThis.keyword))
                    )
                }
            },
            startDateBackUp() {

                if (this.startDate != "0") {
                    return this.startDate
                }

                let currentDate = new Date();
                let day = currentDate.getDate();
                let month = currentDate.getMonth() + 1;
                let year = currentDate.getFullYear();
                if (month > 12) {
                    month -= 12;
                    year += 1;
                }
                let formattedDate = `${year}-${month < 10 ? "0" + month : month}-${day <10 ? "0" + day : day}`;
                this.startDate = formattedDate
                return formattedDate;
            },
            endDateBackUp() {
                if (this.endDate != "0") {
                    return this.endDate
                }
                let currentDate = new Date();
                let day = currentDate.getDate();
                let month = currentDate.getMonth() + 2;
                let year = currentDate.getFullYear();
                if (month > 12) {
                    month -= 12;
                    year += 1;
                }
                let formattedDate = `${year}-${month < 10 ? "0" + month : month}-${day < 10 ? "0" + day : day}`;
                this.endDate = formattedDate
                return formattedDate;
            },

        },
        mounted() {
            $('#preloader').fadeIn();
            for (let i = 1; i < 53; i++) {
                this.week.push({
                    we: "Tuần " + i,
                    va: i
                })
            };

            let currentThis = this;
            let cutomFile = fetch("/NguyenLieu/CustomValue").then(res => res.json())
            let khoPromise = fetch("/KhoXuongThucTe/GetApiKho").then(res => res.json());
            Promise.all([khoPromise, cutomFile])
                .then(data => {
                    $('#preloader').fadeOut();
                    currentThis.CutomFile = data[1] // danh sách custom file trả về
                    currentThis.dsKho = data[0] // danh sách kho trả về
                    currentThis.init();
                })
        },

        methods: {

            init() {
                let CurrentThis = this
                let nl = fetch("/NguyenLieu/DataReport?khoId=" + this.khoId).then(res => res.json())
                let nlXuatKhoPromise1 = fetch(`/XuatKho/NguyenLieuXuatKhoAPI2?end_date=${CurrentThis.startDateBackUp}`).then(res => res.json());
                let nlNhapKhoPromise1 = fetch(`/NhapKho/NguyenLieuNhapKhoAPI2?end_date=${CurrentThis.startDateBackUp}`).then(res => res.json());
                let nlXuatKhoPromise2 = fetch(`/XuatKho/NguyenLieuXuatKhoAPI?sart_date=${CurrentThis.startDateBackUp}&end_date=${CurrentThis.endDateBackUp}`).then(res => res.json());
                let nlNhapKhoPromise2 = fetch(`/NhapKho/NguyenLieuNhapKhoAPI?sart_date=${CurrentThis.startDateBackUp}&end_date=${CurrentThis.endDateBackUp}`).then(res => res.json());

                Promise.all([nl, nlXuatKhoPromise1, nlNhapKhoPromise1, nlXuatKhoPromise2, nlNhapKhoPromise2])
                    .then(data => {
                        let dsNl = CurrentThis.HandleNguyenLieu(data[0]) // danh sách nguyên liệu trả về

                        let dsnlXuatKhoPromise1 = data[1] // danh sách nguyên liệu xuất kho trả về từ đầu đến ngày bắt đầu
                        let dsnlNhapKhoPromise1 = data[2] // danh sách nguyên liệu nhập kho trả về từ đầu đến ngày bắt đầu
                        let dsnlXuatKhoPromise2 = data[3] // danh sách nguyên liệu xuất kho trả về từ ngày bắt đầu đén ngày kết thúc
                        let dsnlNhapKhoPromise2 = data[4] // danh sách nguyên liệu nhập kho trả về từ ngày bắt đầu đén ngày kết thúc


                        let dsNhap1 = CurrentThis.HandleNlNhapKho(dsnlNhapKhoPromise1)



                        let dsNhap2 = CurrentThis.HandleNlNhapKho(dsnlNhapKhoPromise2)



                        let dsXuat1 = CurrentThis.HandleNlXuatKho(dsnlXuatKhoPromise1)



                        let dsXuat2 = CurrentThis.HandleNlXuatKho(dsnlNhapKhoPromise2)

                        dsNl.forEach((currentItem, index) => {
                            //Thêm tổng nhập đầu kỳ
                            // lấy ra phần tử theo mã màu nguyên liệu id và size
                            let nlItem = dsNhap1.filter(c => c.NguyenLieuId == currentItem.NguyenLieuID && c.SizeCustom == currentItem.SizeId && c.MauCustom == currentItem.MauId)
                            try {

                                CurrentThis.data.push({
                                    NguyenLieuID: currentItem.NguyenLieuID,
                                    TenNguyenLieu: currentItem.TenNguyenLieu,
                                    MaNguyenLieu: currentItem.MaNguyenLieu,
                                    khoName: currentItem.khoName,
                                    DonViTinh: currentItem.donViTinh,
                                    MauId: currentItem.MauId,
                                    SizeId: currentItem.SizeId,
                                    Mau: currentItem.Mau,
                                    Size: currentItem.Size,
                                    TongNhapDauKy: nlItem[0].SoLuong
                                })
                            } catch (err) {
                                CurrentThis.data.push({
                                    NguyenLieuID: currentItem.NguyenLieuID,
                                    TenNguyenLieu: currentItem.TenNguyenLieu,
                                    MaNguyenLieu: currentItem.MaNguyenLieu,
                                    khoName: currentItem.khoName,
                                    DonViTinh: currentItem.DonViTinh,
                                    MauId: currentItem.MauId,
                                    SizeId: currentItem.SizeId,
                                    Mau: currentItem.Mau,
                                    Size: currentItem.Size,
                                    TongNhapDauKy: 0
                                })
                            }
                            // Thêm số lượng nhập trong kỳ
                            // lấy ra phần tử theo mã màu nguyên liệu id và size
                            let nlItem2 = dsNhap2.filter(c => c.NguyenLieuId == currentItem.NguyenLieuID && c.SizeCustom == currentItem.SizeId && c.MauCustom == currentItem.MauId)
                            try {

                                CurrentThis.data[index].TongNhapTrongKy = nlItem2[0].SoLuong
                            } catch (err) {
                                CurrentThis.data[index].TongNhapTrongKy = 0
                            }

                            //Thêm tổng xuất đàu kỳ
                            // lấy ra phần tử theo mã màu nguyên liệu id và size
                            let nlItem3 = dsXuat1.filter(c => c.NguyenLieuId == currentItem.NguyenLieuID && c.SizeCustom == currentItem.SizeId && c.MauCustom == currentItem.MauId)
                            try {

                                CurrentThis.data[index].TongXuatDauKy = nlItem3[0].SoLuong
                            } catch (err) {
                                CurrentThis.data[index].TongXuatDauKy = 0
                            }

                            // Thêm số lượng xuất trong kỳ
                            // lấy ra phần tử theo mã màu nguyên liệu id và size
                            let nlItem4 = dsXuat2.filter(c => c.NguyenLieuId == currentItem.NguyenLieuID && c.SizeCustom == currentItem.SizeId && c.MauCustom == currentItem.MauId)
                            try {

                                CurrentThis.data[index].TongXuatTrongKy = nlItem4[0].SoLuong
                            } catch (err) {
                                CurrentThis.data[index].TongXuatTrongKy = 0
                            }

                        })

                    })

            },

            removeVietnamese(text) {
                // Xóa dấu ký tự tiếng Việt
                text = text.replace(/[áàảãạăắằẳẵặâấầẩẫậ]/g, 'a');
                text = text.replace(/[đ]/g, 'd');
                text = text.replace(/[éèẻẽẹêếềểễệ]/g, 'e');
                text = text.replace(/[íìỉĩị]/g, 'i');
                text = text.replace(/[óòỏõọôốồổỗộơớờởỡợ]/g, 'o');
                text = text.replace(/[úùủũụưứừửữự]/g, 'u');
                text = text.replace(/[ýỳỷỹỵ]/g, 'y');

                // Xóa ký tự cách (space) trong chuỗi
                text = text.replace(/\s/g, '');

                return text;
            },
            printDiv() {
                var printContents = document.getElementById('partier_view').innerHTML;
                var originalContents = document.body.innerHTML;
                document.body.innerHTML = printContents;
                window.print();
                document.body.innerHTML = originalContents;
            },
            ChangeKho() {
                this.data = []
                this.init();
                if (this.khoId == 0) {
                    this.khoName = "Kho nguyên liệu"
                }
                else {
                    this.khoName = this.dsKho.filter(i => i.Id == this.khoId)[0].TenKho;
                }
            },
            Update() {
                var dateString1 = "2023-07-07";
                var dateString2 = "2023-07-10";

                var date1 = new Date(this.startDate);
                var date2 = new Date(this.endDate);

                if (date2 < date1) {
                    Swal.fire('Ngày không hợp lệ')
                    return
                }
                this.data = []
                this.init();
            },
            HandleNlNhapKho(data) {
                let currentThis = this
                var result = []
                // sử lý Mau và Size
                data.forEach((item, index) => {
                    let check = true
                    try {
                        // dich nguoc chuoi ChiTietCustom
                        let _ctct = JSON.parse(item.ChiTietCusTom);
                        //tach list custom thanh cac nguyen lieu khac
                        _ctct.forEach((i, index2) => {
                            let ListCustom = JSON.parse(i.ListCustom);
                            result.push({
                                NguyenLieuId: item.NguyenLieuId,
                                Solo: item.Solo,
                                DonGia: item.DonGia,
                                MaHaiQuan: item.MaHaiQuan,
                                MaKho: item.MaKho,
                                MauCustom: ListCustom[0],
                                SizeCustom: ListCustom[1],
                                SoLuong: Number.parseInt(i.QuantityProduct),
                            })
                        })
                    }
                    catch (err) {
                        check = false;
                    } finally {
                        if (!check) {
                            result.push({
                                NguyenLieuId: item.NguyenLieuId,
                                Solo: item.Solo,
                                DonGia: item.DonGia,
                                MaHaiQuan: item.MaHaiQuan,
                                MaKho: item.MaKho,
                                MauCustom: "-",
                                SizeCustom: "-",
                                SoLuong: item.SoLuongNhap,
                            })
                        }
                    }
                })
                let sums = {};
                // Iterate over the data array
                for (let i = 0; i < result.length; i++) {
                    let item = result[i];
                    let key = item.NguyenLieuId + '-' + item.MauCustom + '-' + item.SizeCustom;

                    // If the key already exists, add the quantity to the sum
                    if (sums.hasOwnProperty(key)) {
                        sums[key].SoLuong += item.SoLuong;
                    } else {
                        // Otherwise, initialize the sum with the current item
                        sums[key] = { ...item };
                    }
                }
                var result2 = Object.values(sums);
                return result2;
            },
            HandleNlXuatKho(data) {
                let currentThis = this
                var result = []
                // sử lý Mau và Size
                data.forEach((item, index) => {
                    let check = true
                    try {
                        // dich nguoc chuoi ChiTietCustom
                        let _ctct = JSON.parse(item.ChiTietCusTom);
                        //tach list custom thanh cac nguyen lieu khac
                        _ctct.forEach((i, index2) => {
                            let ListCustom = JSON.parse(i.ListCustom);
                            result.push({
                                NguyenLieuId: item.NguyenLieuId,
                                Solo: item.Solo,
                                DonGia: item.DonGia,
                                MaHaiQuan: item.MaHaiQuan,
                                MaKho: item.MaKho,
                                MauCustom: ListCustom[0],
                                SizeCustom: ListCustom[1],
                                SoLuong: Number.parseInt(i.QuantityProduct),
                            })
                        })
                    }
                    catch (err) {
                        check = false;
                    } finally {
                        if (!check) {
                            result.push({
                                NguyenLieuId: item.NguyenLieuId,
                                Solo: item.Solo,
                                DonGia: item.DonGia,
                                MaHaiQuan: item.MaHaiQuan,
                                MaKho: item.MaKho,
                                MauCustom: "-",
                                SizeCustom: "-",
                                SoLuong: item.SoLuongXuat,
                            })
                        }
                    }

                })

                let sums = {};
                // Iterate over the data array
                for (let i = 0; i < result.length; i++) {
                    let item = result[i];
                    let key = item.NguyenLieuId + '-' + item.MauCustom + '-' + item.SizeCustom;

                    // If the key already exists, add the quantity to the sum
                    if (sums.hasOwnProperty(key)) {
                        sums[key].SoLuong += item.SoLuong;
                    } else {
                        // Otherwise, initialize the sum with the current item
                        sums[key] = { ...item };
                    }
                }

                var result2 = Object.values(sums);
                return result2;
            },
            HandleNguyenLieu(data) {
                let result = []
                let currentThis = this;
                console.log("currentThis.CutomFile", currentThis.CutomFile)
                data.forEach((item, index) => {
                    let check = false
                    if (item.custom.length != 0) {
                        item.custom.forEach(i => {
                            let list = JSON.parse(i.ListCustom)
                            result.push({
                                NguyenLieuID: item.id,
                                TenNguyenLieu: item.tenNl,
                                MaNguyenLieu: item.maNl,
                                khoName: item.khoName,
                                DonViTinh: item.donViTinh,
                                MauId: list[0],
                                SizeId: list[1],
                                Mau: currentThis.CutomFile.filter(s => s.Id == list[0]).length == 0 ? "" : currentThis.CutomFile.filter(s => s.Id == list[0])[0].CustomFieldValue,
                                Size: currentThis.CutomFile.filter(s => s.Id == list[1]).length == 0 ? "" : currentThis.CutomFile.filter(s => s.Id == list[1])[0].CustomFieldValue
                            })
                        })
                    }
                    else {
                        result.push({
                            NguyenLieuID: item.id,
                            TenNguyenLieu: item.tenNl,
                            MaNguyenLieu: item.maNl,
                            khoName: item.khoName,
                            DonViTinh: item.donViTinh,
                            MauId: '-',
                            SizeId: "-",
                            Mau: "",
                            Size: ""
                        })

                    }
                }
                )
                return result;
            },
            ChooseWeek() {
                let year = new Date().getFullYear()// Năm
                let week1 = this.currentWeek; // Tuần

                // Tạo một đối tượng Date cho ngày đầu tiên của năm
                const firstDayOfYear = new Date(year, 0, 1);

                // Lấy ngày bắt đầu của tuần thứ 29
                const firstDayOfWeek = new Date(firstDayOfYear.getTime() + (week1 - 1) * 7 * 24 * 60 * 60 * 1000);

                // Lấy ngày kết thúc của tuần thứ 29 (ngày bắt đầu + 6 ngày)
                const lastDayOfWeek = new Date(firstDayOfWeek.getTime() + 6 * 24 * 60 * 60 * 1000);


                const formattedDate = firstDayOfWeek.toLocaleDateString('en-CA');
                const [month1, day1, year1] = formattedDate.split('/').map((item) => item.padStart(2, '0'));
                this.startDate = `${month1}`;

                const formattedDate2 = lastDayOfWeek.toLocaleDateString('en-CA');
                const [month2, day2, year2] = formattedDate2.split('/').map((item) => item.padStart(2, '0'));
                this.endDate = `${month2}`;
                console.log(this.endDate)

                this.data = []
                this.init();

            }
        }
    });

    window.matchMedia('print').addListener(function (mediaQueryList) {
        if (!mediaQueryList.matches) {
            $('#preloader').fadeIn();
            window.location.reload()
        }
    });

    window.onafterprint = function () {
        $('#preloader').fadeIn();
        window.location.reload()
    };


</script>
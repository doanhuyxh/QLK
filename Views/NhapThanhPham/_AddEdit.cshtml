@model AMS.Models.NhapThanhPhamViewModel.NhapThanhPhamCRUDViewModel

@{
    ViewData["Title"] = "Create";
}
<div id="AppNhapThanhPham" class="view-add-edit view-edit-NhapThanhPham">
    <div class="row">
        <div class="col-md-12">
            <form id="frmNhapThanhPham">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="Id" />
                <input type="hidden" asp-for="CreatedDate" />
                <input type="hidden" asp-for="CreatedBy" />
                <div class="d-flex py-3">
                    <button type="button" class="btn btn-secondary text-nowrap" v-on:click="toggleExcel(1)">Thêm thường</button>
                    <button type="button" class="mx-3 btn btn-success text-nowrap" v-on:click="toggleExcel(2)">Thêm Excel</button>
                    <button type="button" class="mx-3 btn btn-success text-nowrap" v-on:click="toggleExcel(3)">Thêm bằng phiếu nhập</button>
                    <button v-show="IsImportExcel" type="button" class="mx-3 btn btn-info text-nowrap" v-on:click="downloadFile()">Tải file mẫu</button>

                </div>
                <div v-show="IsImportExcel" class="mb-3 px-3">

                    <div class="input-group mt-2 w-50">
                        <div class="input-group-prepend">
                            <span class="input-group-text">Upload</span>
                        </div>
                        <div class="custom-file">
                            <input type="file" accept=".xlsx" class="custom-file-input" id="excel_file" v-on:change="ImportExcel">
                            <label class="custom-file-label" for="excel_file">Choose file</label>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <div class="form-group">
                            <label asp-for="NgayNhap" class="control-label"></label>
                            <input asp-for="NgayNhap" type="date" class="form-control" />
                            <span asp-validation-for="NgayNhap" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="Ma" class="control-label"></label>
                            <input asp-for="Ma" readonly class="form-control" v-bind:value="maNhap" />
                        </div>
                        <div class="form-group" v-if="IsPhieuNhap">
                            <label for="chonnhaplythuyet">Chọn mã phiếu nhập</label>
                            <select class="form-control" id="chonnhaplythuyet" v-on:change="LayTuNhapKhoLyThuyet">
                                <option value="0" disabled selected>Vui lòng chọn</option>
                                <option v-for="ThoiGian in DanhSachLayTuPhieuNhap" v-bind:value="ThoiGian.Id">{{ThoiGian.MaNhap}}</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label asp-for="DonViTienTe" class="control-label"></label>
                            <input asp-for="DonViTienTe" class="form-control" v-model="DonViTienTe" />
                            <span asp-validation-for="DonViTienTe" class="text-danger"></span>
                        </div>
                    </div>
                    <p class="col-12 font-weight-bold text-danger text-center">Thành Phẩm Nhập Kho</p>
                    <table class="table">
                        <thead>
                            <tr>
                                <td>STT</td>
                                <td>Ngày nhập</td>
                                <td>Khách hàng</td>
                                <td>Mã hàng</td>
                                <td>Tên thành phẩm</td>
                                <td>PO</td>
                                <td>Màu sắc</td>
                                <td>Size</td>
                                <td>Số Lượng</td>
                                <td>Đơn Giá</td>
                                <td>Thành tiền</td>
                                <td></td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="(item,index) in BackupItem">
                                <td>{{index+1}}</td>
                                <td>
                                    <input v-model="item.NgayNhap.split(`T`)[0]" v-if="Id == 0" type="text" class="form-control" />
                                    <input v-model="item.NgayNhap.split(`T`)[0]" v-else-if="Id > 0" type="text" class="form-control" />
                                    <input v-model="item.NgayNhap" v-else type="date" class="form-control" />
                                </td>
                                <td>
                                    <input v-model="item.KhachHang" type="text" class="form-control" />
                                </td>
                                <td>
                                    <input v-model="item.MaHang" type="text" class="form-control" />
                                </td>
                                <td>
                                    <select v-model="item.ThanhPhamId" class="form-control" v-on:change="autoFill(index)">
                                        <option disabled value="">Chọn thành phẩm</option>
                                        <option v-for="nl in DanhSachThanhPham" v-bind:key="nl.Id" v-bind:value="nl.Id">{{ nl.TenThanhPham }}</option>
                                    </select>
                                </td>
                                <td>
                                    <input v-model="item.PO" type="text" class="form-control" />
                                </td>
                                <td>
                                    <input v-model="item.Mau" type="text" class="form-control" />
                                </td>
                                <td>
                                    <input v-model="item.Size" type="text" class="form-control" />
                                </td>

                                <td>
                                    <input v-model="item.SoLuong" type="number" class="form-control" />
                                </td>
                                <td>
                                    <input v-model="item.DonGia" type="number" class="form-control" />
                                </td>
                                <td>
                                    <input readonly v-bind:value="formatCurrency(item.SoLuong*item.DonGia)" class="form-control" />
                                </td>
                                <td><button class="btn btn-warning" type="button" v-on:click="Xoa(index)">Xoá</button></td>
                            </tr>

                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="11">Tổng cộng: {{toatl}}</td>
                                <td><button type="button" class="btn btn-primary" v-on:click="Them()">Thêm</button></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
                <div class="form-group">
                    <input type="button" id="btnSave" value="Lưu" onclick="Save()" class="btn btn-info">
                    <button type="button" id="btnClose" class="btn btn-danger" data-dismiss="modal">Đóng</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script lang="javascript" src="https://cdn.sheetjs.com/xlsx-0.19.3/package/dist/xlsx.full.min.js"></script>

<script src="/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"></script>
<script type="text/javascript">
    AppNhapThanhPham = new Vue({
        el: '#AppNhapThanhPham',
        mounted() {
            this.init();
            this.RenderMa();
        },
        data: {
            Id: @Html.Raw(@Model.Id),
            NgayNhap: "@Html.Raw(@Model.NgayNhap)",
            Ma: "@Html.Raw(@Model.Ma)",
            images: new Map(),
            previewImageThumb: "/images/DefaultAsset/image_thumb.png",
            previewImage: null,
            DanhSachThanhPham: [],
            ThanhPhamNhapKho: @Html.Raw(ViewBag.DanhSachThanhPham),
            maNhap: "",
            IsImportExcel: false,
            IsPhieuNhap: false,
            DanhSachLayTuPhieuNhap: [],
            NhapKhoLyThuyetId: null,
            DonViTienTe: "@Html.Raw(Model.DonViTienTe)"

        },
        computed: {
            BackupItem: function () {
                return this.ThanhPhamNhapKho.filter(item => item.Cancelled == false)
            },
            toatl: function () {
                let totals = 0;
                this.ThanhPhamNhapKho.forEach(item => {
                    totals += (item.SoLuong * item.DonGia)
                })
                return this.formatCurrency(totals);
            }
        },
        methods: {
            fileSelected(evt, previewImage) {
                evt.preventDefault()
                const reader = new FileReader();
                reader.readAsDataURL(evt.target.files[0]);
                reader.onload = e => {
                    document.getElementById(previewImage).style.backgroundImage = `url('${e.target.result}')`;
                };
                this.images.set(previewImage, evt.target.files[0]);
            },
            autoFill: function (index) {
                let tp = this.DanhSachThanhPham.filter(i => i.Id == this.ThanhPhamNhapKho[index].ThanhPhamId)[0];
                this.ThanhPhamNhapKho[index].PO = tp.PO;
                this.ThanhPhamNhapKho[index].Mau = tp.Mau;
                this.ThanhPhamNhapKho[index].Size = tp.Size;
            },
            init: function () {
                fetch("/QuanLyThanhPham/GetAllThanhPham")
                    .then(res => res.json())
                    .then(data => {
                        this.DanhSachThanhPham = data;
                    })
            },
            makeid: function (length) {
                let result = '';
                const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
                const charactersLength = characters.length;
                let counter = 0;
                while (counter < length) {
                    result += characters.charAt(Math.floor(Math.random() * charactersLength));
                    counter += 1;
                }
                return result;
            },
            Them: function () {
                this.ThanhPhamNhapKho.push({
                    Id: 0,
                    Cancelled: false,
                    ThanhPhamId: 0,
                    SoLuong: 0,
                    DonGia: 0,
                    NhapKhoThanhPhamId: 0,
                    PO: "",
                    Size: "",
                    Mau: "",
                    KhachHang: "",
                    MaHang: "",
                    NgayNhap: "",
                })
            },
            Xoa: function (index) {
                if (this.ThanhPhamNhapKho.filter(item => item.Cancelled == false).length > 1) {
                    this.ThanhPhamNhapKho[index].Cancelled = true
                }
                if (this.ThanhPhamNhapKho[index].Cancelled == true && this.ThanhPhamNhapKho[index].Id == 0) {
                    this.ThanhPhamNhapKho.splice(index, 1);
                }

            },
            formatCurrency(amount) {
                var DecimalSeparator = Number('1.2').toLocaleString().substr(1, 1);
                var priceWithCommas = amount.toLocaleString();
                var arParts = String(priceWithCommas).split(DecimalSeparator);
                var intPart = arParts[0];
                return intPart + " " + this.DonViTienTe;
            },
            RenderMa: function () {
                if (this.Id != 0) {
                    this.maNhap = this.Ma;
                    return;
                }
                const currentDate = new Date();
                const day = currentDate.getDate();
                const month = currentDate.getMonth() + 1; // Lưu ý: tháng bắt đầu từ 0, nên cần cộng thêm 1
                const year = currentDate.getFullYear();
                const CurrentThis = this;
                let MaPhieuMuaHang = `PNTP${year}${month}${day}`;
                fetch(`/NhapThanhPham/GetAllMANhapThanhPhamByMa?ma=${MaPhieuMuaHang}`)
                    .then(res => res.json())
                    .then(data => {
                        let count = data.length;
                        if (count == 0) {
                            CurrentThis.maNhap = MaPhieuMuaHang
                        }
                        else {
                            CurrentThis.maNhap = MaPhieuMuaHang + "_" + count
                        }

                    })
                    .catch(err => {
                        CurrentThis.maNhap = MaPhieuMuaHang
                    })
            },
            ImportExcel: function () {

                const CurrentThis = this;

                let input = document.getElementById("excel_file");
                const file = input.files[0];
                const reader = new FileReader();

                function tp(tp, PO, Size, Mau) {
                    this.tp = tp;
                    this.PO = PO;
                    this.Size = Size;
                    this.Mau = Mau;
                }

                reader.onload = (event) => {
                    $('#preloader').fadeIn();
                    const data = event.target.result;

                    const workbook = XLSX.read(data, { type: 'binary' });
                    const sheetName = workbook.SheetNames[0];
                    const worksheet = workbook.Sheets[sheetName];
                    const jsonData = XLSX.utils.sheet_to_json(worksheet);

                    let TP_khong_ton_tai = []

                    console.table("jsonData");
                    console.table(jsonData);

                    console.log("CurrentThis.DanhSachThanhPham", CurrentThis.DanhSachThanhPham)

                    for (const item of jsonData) {
                        const exists = CurrentThis.DanhSachThanhPham.some(item2 =>
                            CurrentThis.removeAccents(item2.TenThanhPham.toLowerCase()) === CurrentThis.removeAccents(item["Tên thành phẩm"]).toLowerCase()
                            && CurrentThis.removeAccents(item2.Mau.toLowerCase()) === CurrentThis.removeAccents(item["Mầu sắc"]).toLowerCase()
                            && CurrentThis.removeAccents(item2.PO.toLowerCase()) === CurrentThis.removeAccents(item["PO"]).toLowerCase()
                            && CurrentThis.removeAccents(item2.Size.toLowerCase()) === CurrentThis.removeAccents(item["Size"]).toLowerCase()
                        );
                        console.log("exists", exists)
                        if (exists == false) {
                            let tp2 = new tp(item["Tên thành phẩm"], item["PO"], item["Size"], item["Mầu sắc"])
                            TP_khong_ton_tai.push(tp2);
                            alert("Thành phẩm " + item["Tên thành phẩm"] + " màu " + item["Mầu sắc"] + " size " + item["Size"] + " chưa có trong ứng dụng");
                            $('#preloader').fadeOut();
                            return;

                        };

                        CurrentThis.ThanhPhamNhapKho.push({
                            Id: 0,
                            Cancelled: false,
                            ThanhPhamId: CurrentThis.DanhSachThanhPham.filter(i => CurrentThis.removeAccents(i.TenThanhPham.toLowerCase()) === CurrentThis.removeAccents(item["Tên thành phẩm"]).toLowerCase())[0].Id,
                            SoLuong: item["Số Lượng"],
                            DonGia: item["Đơn Giá"],
                            NhapKhoThanhPhamId: 0,
                            PO: item["PO"],
                            Size: item["Size"],
                            Mau: item["Mầu sắc"],
                        })
                    }

                    $('#preloader').fadeOut();

                };
                reader.readAsBinaryString(file);

            },
            removeAccents(str) {
                var AccentsMap = [
                    "aàảãáạăằẳẵắặâầẩẫấậ",
                    "AÀẢÃÁẠĂẰẲẴẮẶÂẦẨẪẤẬ",
                    "dđ", "DĐ",
                    "eèẻẽéẹêềểễếệ",
                    "EÈẺẼÉẸÊỀỂỄẾỆ",
                    "iìỉĩíị",
                    "IÌỈĨÍỊ",
                    "oòỏõóọôồổỗốộơờởỡớợ",
                    "OÒỎÕÓỌÔỒỔỖỐỘƠỜỞỠỚỢ",
                    "uùủũúụưừửữứự",
                    "UÙỦŨÚỤƯỪỬỮỨỰ",
                    "yỳỷỹýỵ",
                    "YỲỶỸÝỴ"
                ];
                for (var i = 0; i < AccentsMap.length; i++) {
                    var re = new RegExp('[' + AccentsMap[i].substr(1) + ']', 'g');
                    var char = AccentsMap[i][0];
                    if (str != undefined) {
                        str = str.toString().replace(re, char);
                    }
                    else {
                        continue;
                    }
                }
                return str;
            },
            downloadFile: function () {
                $('#preloader').fadeIn();
                const fileUrl = '/upload/excel/MauNhapThanhPham.xlsx';
                const link = $('<a>', {
                    href: fileUrl,
                    download: 'MauNhapThanhPham.xlsx'
                }).appendTo('body');
                link[0].click();
                link.remove();
                $('#preloader').fadeOut();
            },
            toggleExcel: function (newItem) {
                if (newItem == 1){
                     this.IsImportExcel = false;
                    this.IsPhieuNhap = false;

                }
                else if (newItem == 3){
                    this.IsPhieuNhap = true;
                    this.IsImportExcel = false;
                    let curenntThis = this;
                    fetch("/PhieuNhapThanhPham/GetListNhapKhoLyThuyetKhiChuaNhap").then(res => res.json()).then(data => { curenntThis.DanhSachLayTuPhieuNhap = data });

                }
                else{
                    this.IsImportExcel = true;
                    this.IsPhieuNhap = false;
                }
               

            },
            LayTuNhapKhoLyThuyet: function (event) {
                let idPhieu = event.target.value;
                const CurentThis = this;
                CurentThis.ThanhPhamNhapKho = [];
                CurentThis.NhapKhoLyThuyetId = idPhieu;
                fetch(`/PhieuNhapThanhPham/GetListNguyenLieuNhapKhoLyThuyetKhiChuaNhapByID?nhakholythuyet=${idPhieu}`)
                    .then(res => res.json())
                    .then(data => {
                        data.forEach(item => {
                            CurentThis.ThanhPhamNhapKho.push({
                                Id: 0,
                                Cancelled: false,
                                ThanhPhamId: item.IDNguyenLieu,
                                SoLuong: item.SoLuong,
                                DonGia: item.DonGia,
                                NhapKhoThanhPhamId: item.IDPhieu,
                                PO: item.PO,
                                Size: item.Size,
                                Mau: item.Mau,
                                KhachHang: item.KhachHang,
                                MaHang: item.MaHang,
                                NgayNhap: item.NgayNhap,
                            })
                        })
                    })
            },
        }
    });

</script>
